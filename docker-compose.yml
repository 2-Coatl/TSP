version: '3.8'
services:
  # Servicio de almacenamiento
  storage:
    build: ./storage
    container_name: storage
    environment:
      - STORAGE_PATH=${STORAGE_PATH}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/${REDIS_DB}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FILE=${LOG_FILE_STORAGE}
    volumes:
      - ./data:${STORAGE_PATH}
      - ./logs:/app/logs
      - ./scripts:/scripts
      - ./storage:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    command: ["/scripts/wait-for-postgres.sh", "-h", "db", "-U", "${DB_USER}", "-P", "${DB_PASSWORD}", "-d", "${DB_NAME}", "-t", "60", "-i", "5", "--", "python", "main.py"]

  # Servicio para pruebas
  test:
    build: 
      context: ./storage
      dockerfile: Dockerfile
    container_name: storage_test
    volumes:
      - ./storage:/app
    depends_on:
      storage:
        condition: service_healthy
    environment:
      - TESTING=True
      # Incluye estas variables solo si tus pruebas las necesitan
      # - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      # - REDIS_URL=redis://redis:6379/${REDIS_DB}
    networks:
      - app_network
    #command: ["pytest", "-v", "/app/tests", "--import-mode=importlib"]
    command: ["python", "-m", "pytest", "-v", "/app/tests"]

  # Base de datos PostgreSQL
  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis para manejo de colas
  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - app_network
    volumes:
      - redis_data:/redis_data

  # RabbitMQ (opcional)
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672" # Puerto para los consumidores
      - "15672:15672" # Puerto de la interfaz web de administraci√≥n
    networks:
      - app_network
      - external_network

  # Adminer
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "9090:8080" # Puerto para acceder a Adminer
    depends_on:
      - db
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
  external_network:
    driver: bridge